trigger:
  branches:
    include:
      - '*'

pr:
  branches:
    include:
      - '*'

variables:
  DOCKER_REGISTRY: 'ghcr.io/${{ variables['Build.Repository.Name'] }}'
  PR_NUMBER: $[variables['System.PullRequest.PullRequestId']]
  SHA: $[variables['Build.SourceVersion']]
  DB_IMAGE: 'ghcr.io/${{ variables['Build.Repository.Name'] }}/pr-${{ variables['PR_NUMBER'] }}-db:${{ variables['SHA'] }}'
  FRONTEND_IMAGE: 'ghcr.io/${{ variables['Build.Repository.Name'] }}/pr-${{ variables['PR_NUMBER'] }}-app:${{ variables['SHA'] }}'
  AZURE_CONTAINERAPPS_ENV: 'your-aca-env-name'
  AZURE_RESOURCE_GROUP: 'your-resource-group'
  DB_NAME: 'reviewapp'
  DB_USER: 'reviewuser'
  DB_PASSWORD: '$(DB_PASSWORD)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
  - job: BuildImages
    steps:
    - checkout: self
    - task: DockerInstaller@0
      inputs:
        dockerVersion: 'latest'
    - script: |
        docker build -t $DB_IMAGE apps/database
        docker build -t $FRONTEND_IMAGE apps/frontend
    - script: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push $DB_IMAGE
        docker push $FRONTEND_IMAGE
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

- stage: Deploy
  jobs:
  - job: DeployReviewApp
    steps:
    - checkout: self
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'your-azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az containerapp create \
            --name frontend-pr-${{ variables['PR_NUMBER'] }} \
            --resource-group $AZURE_RESOURCE_GROUP \
            --environment $AZURE_CONTAINERAPPS_ENV \
            --image $FRONTEND_IMAGE \
            --env-vars DB_HOST=db-pr-${{ variables['PR_NUMBER'] }} DB_PORT=5432 DB_NAME=$DB_NAME DB_USER=$DB_USER DB_PASSWORD=$DB_PASSWORD

          az containerapp create \
            --name db-pr-${{ variables['PR_NUMBER'] }} \
            --resource-group $AZURE_RESOURCE_GROUP \
            --environment $AZURE_CONTAINERAPPS_ENV \
            --image $DB_IMAGE \
            --env-vars POSTGRES_DB=$DB_NAME POSTGRES_USER=$DB_USER POSTGRES_PASSWORD=$DB_PASSWORD

- stage: Cleanup
  condition: or(eq(variables['Build.Reason'], 'PullRequestClosed'), eq(variables['Build.Reason'], 'Merged'))
  jobs:
  - job: CleanupReviewApp
    steps:
    - checkout: self
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'your-azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az containerapp delete --name frontend-pr-${{ variables['PR_NUMBER'] }} --resource-group $AZURE_RESOURCE_GROUP --yes
          az containerapp delete --name db-pr-${{ variables['PR_NUMBER'] }} --resource-group $AZURE_RESOURCE_GROUP --yes
